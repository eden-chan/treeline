{"version":3,"file":"useQuery.js","sourceRoot":"","sources":["../src/useQuery.ts"],"names":[],"mappings":";;AA6BA,4BA6DC;AA1FD,0CASyB;AACzB,iCAAkE;AAElE,MAAM,YAAY,GAAG;IACnB,SAAS,EAAE,IAAI;IACf,IAAI,EAAE,SAAS;IACf,QAAQ,EAAE,SAAS;IACnB,KAAK,EAAE,SAAS;CACjB,CAAC;AAEF,SAAS,cAAc,CAAC,MAAW;IACjC,uBACE,SAAS,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,EAC3B,IAAI,EAAE,SAAS,EACf,QAAQ,EAAE,SAAS,EACnB,KAAK,EAAE,SAAS,IACb,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EACzB;AACJ,CAAC;AAED,SAAgB,QAAQ,CAOtB,KAA2D,EAC3D,MAAgB;IAKhB,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,IAAA,kBAAW,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAClD,MAAM,SAAS,GAAG,IAAA,eAAQ,EAAC,KAAK,CAAC,CAAC;IAElC,iDAAiD;IACjD,0DAA0D;IAC1D,0CAA0C;IAC1C,2EAA2E;IAC3E,uCAAuC;IACvC,MAAM,cAAc,GAAG,IAAA,cAAM,EAE3B,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAE3D,uEAAuE;IACvE,2EAA2E;IAC3E,MAAM,SAAS,GAAG,IAAA,mBAAW,EAC3B,CAAC,EAAE,EAAE,EAAE;QACL,mCAAmC;QACnC,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,WAAW,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;YAC7B,OAAO,WAAW,CAAC;QACrB,CAAC;QAED,MAAM,WAAW,GAAG,KAAK,CAAC,cAAc,CAAI,KAAK,EAAE,CAAC,MAAM,EAAE,EAAE;YAC5D,cAAc,CAAC,OAAO,mBACpB,SAAS,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,EAC3B,IAAI,EAAE,SAAS,EACf,QAAQ,EAAE,SAAS,EACnB,KAAK,EAAE,SAAS,IACb,MAAM,CACV,CAAC;YAEF,EAAE,EAAE,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC;IACrB,CAAC;IACD,sDAAsD;IACtD,CAAC,SAAS,CAAC,CACZ,CAAC;IAEF,MAAM,KAAK,GAAG,IAAA,4BAAoB,EAGhC,SAAS,EACT,GAAG,EAAE,CAAC,cAAc,CAAC,OAAO,EAC5B,GAAG,EAAE,CAAC,YAAY,CACnB,CAAC;IACF,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;AAC1B,CAAC","sourcesContent":["import {\n  weakHash,\n  coerceQuery,\n  type Query,\n  type Exactly,\n  type InstantClient,\n  type LifecycleSubscriptionState,\n  type InstaQLQueryParams,\n  type InstantGraph,\n} from \"@instantdb/core\";\nimport { useCallback, useRef, useSyncExternalStore } from \"react\";\n\nconst defaultState = {\n  isLoading: true,\n  data: undefined,\n  pageInfo: undefined,\n  error: undefined,\n};\n\nfunction stateForResult(result: any) {\n  return {\n    isLoading: !Boolean(result),\n    data: undefined,\n    pageInfo: undefined,\n    error: undefined,\n    ...(result ? result : {}),\n  };\n}\n\nexport function useQuery<\n  Q extends Schema extends InstantGraph<any, any>\n    ? InstaQLQueryParams<Schema>\n    : Exactly<Query, Q>,\n  Schema extends InstantGraph<any, any, any> | {},\n  WithCardinalityInference extends boolean,\n>(\n  _core: InstantClient<Schema, any, WithCardinalityInference>,\n  _query: null | Q,\n): {\n  state: LifecycleSubscriptionState<Q, Schema, WithCardinalityInference>;\n  query: any;\n} {\n  const query = _query ? coerceQuery(_query) : null;\n  const queryHash = weakHash(query);\n\n  // We use a ref to store the result of the query.\n  // This is becuase `useSyncExternalStore` uses `Object.is`\n  // to compare the previous and next state.\n  // If we don't use a ref, the state will always be considered different, so\n  // the component will always re-render.\n  const resultCacheRef = useRef<\n    LifecycleSubscriptionState<Q, Schema, WithCardinalityInference>\n  >(stateForResult(_core._reactor.getPreviousResult(query)));\n\n  // Similar to `resultCacheRef`, `useSyncExternalStore` will unsubscribe\n  // if `subscribe` changes, so we use `useCallback` to memoize the function.\n  const subscribe = useCallback(\n    (cb) => {\n      // Don't subscribe if query is null\n      if (!query) {\n        const unsubscribe = () => {};\n        return unsubscribe;\n      }\n\n      const unsubscribe = _core.subscribeQuery<Q>(query, (result) => {\n        resultCacheRef.current = {\n          isLoading: !Boolean(result),\n          data: undefined,\n          pageInfo: undefined,\n          error: undefined,\n          ...result,\n        };\n\n        cb();\n      });\n\n      return unsubscribe;\n    },\n    // Build a new subscribe function if the query changes\n    [queryHash],\n  );\n\n  const state = useSyncExternalStore<\n    LifecycleSubscriptionState<Q, Schema, WithCardinalityInference>\n  >(\n    subscribe,\n    () => resultCacheRef.current,\n    () => defaultState,\n  );\n  return { state, query };\n}\n"]}