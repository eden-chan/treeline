{"version":3,"file":"InstantReact.js","sourceRoot":"","sources":["../src/InstantReact.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  // types\n  InstantClient,\n  Auth,\n  Storage,\n  txInit,\n  _init_internal,\n  i,\n  type AuthState,\n  type Config,\n  type Query,\n  type Exactly,\n  type TransactionChunk,\n  type LifecycleSubscriptionState,\n  type PresenceOpts,\n  type PresenceResponse,\n  type RoomSchemaShape,\n  type InstaQLQueryParams,\n  type ConfigWithSchema,\n  type IDatabase,\n  type InstantGraph,\n  type QueryResponse,\n  type PageInfoResponse,\n} from \"@instantdb/core\";\nimport {\n  KeyboardEvent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useSyncExternalStore,\n} from \"react\";\nimport { useQuery } from \"./useQuery\";\nimport { useTimeout } from \"./useTimeout\";\n\nexport type PresenceHandle<\n  PresenceShape,\n  Keys extends keyof PresenceShape,\n> = PresenceResponse<PresenceShape, Keys> & {\n  publishPresence: (data: Partial<PresenceShape>) => void;\n};\n\nexport type TypingIndicatorOpts = {\n  timeout?: number | null;\n  stopOnEnter?: boolean;\n  // Perf opt - `active` will always be an empty array\n  writeOnly?: boolean;\n};\n\nexport type TypingIndicatorHandle<PresenceShape> = {\n  active: PresenceShape[];\n  setActive(active: boolean): void;\n  inputProps: {\n    onKeyDown: (e: KeyboardEvent) => void;\n    onBlur: () => void;\n  };\n};\n\nexport const defaultActivityStopTimeout = 1_000;\n\nexport class InstantReactRoom<\n  Schema extends InstantGraph<any, any> | {},\n  RoomSchema extends RoomSchemaShape,\n  RoomType extends keyof RoomSchema,\n> {\n  _core: InstantClient<Schema, RoomSchema>;\n  type: RoomType;\n  id: string;\n\n  constructor(\n    _core: InstantClient<Schema, RoomSchema, any>,\n    type: RoomType,\n    id: string,\n  ) {\n    this._core = _core;\n    this.type = type;\n    this.id = id;\n  }\n\n  /**\n   * Listen for broadcasted events given a room and topic.\n   *\n   * @see https://instantdb.com/docs/presence-and-topics\n   * @example\n   *  function App({ roomId }) {\n   *    db.room(roomType, roomId).useTopicEffect(\"chat\", (message, peer) => {\n   *      console.log(\"New message\", message, 'from', peer.name);\n   *    });\n   *\n   *    // ...\n   *  }\n   */\n  useTopicEffect = <TopicType extends keyof RoomSchema[RoomType][\"topics\"]>(\n    topic: TopicType,\n    onEvent: (\n      event: RoomSchema[RoomType][\"topics\"][TopicType],\n      peer: RoomSchema[RoomType][\"presence\"],\n    ) => any,\n  ): void => {\n    useEffect(() => {\n      const unsub = this._core._reactor.subscribeTopic(\n        this.id,\n        topic,\n        (event, peer) => {\n          onEvent(event, peer);\n        },\n      );\n\n      return unsub;\n    }, [this.id, topic]);\n  };\n\n  /**\n   * Broadcast an event to a room.\n   *\n   * @see https://instantdb.com/docs/presence-and-topics\n   * @example\n   * function App({ roomId }) {\n   *   const publishTopic = db.room(roomType, roomId).usePublishTopic(\"clicks\");\n   *\n   *   return (\n   *     <button onClick={() => publishTopic({ ts: Date.now() })}>Click me</button>\n   *   );\n   * }\n   *\n   */\n  usePublishTopic = <Topic extends keyof RoomSchema[RoomType][\"topics\"]>(\n    topic: Topic,\n  ): ((data: RoomSchema[RoomType][\"topics\"][Topic]) => void) => {\n    useEffect(() => this._core._reactor.joinRoom(this.id), [this.id]);\n\n    const publishTopic = useCallback(\n      (data) => {\n        this._core._reactor.publishTopic({\n          roomType: this.type,\n          roomId: this.id,\n          topic,\n          data,\n        });\n      },\n      [this.id, topic],\n    );\n\n    return publishTopic;\n  };\n\n  /**\n   * Listen for peer's presence data in a room, and publish the current user's presence.\n   *\n   * @see https://instantdb.com/docs/presence-and-topics\n   * @example\n   *  function App({ roomId }) {\n   *    const {\n   *      peers,\n   *      publishPresence\n   *    } = db.room(roomType, roomId).usePresence({ keys: [\"name\", \"avatar\"] });\n   *\n   *    // ...\n   *  }\n   */\n  usePresence = <Keys extends keyof RoomSchema[RoomType][\"presence\"]>(\n    opts: PresenceOpts<RoomSchema[RoomType][\"presence\"], Keys> = {},\n  ): PresenceHandle<RoomSchema[RoomType][\"presence\"], Keys> => {\n    const [state, setState] = useState<\n      PresenceResponse<RoomSchema[RoomType][\"presence\"], Keys>\n    >(() => {\n      return (\n        this._core._reactor.getPresence(this.type, this.id, opts) ?? {\n          peers: {},\n          isLoading: true,\n        }\n      );\n    });\n\n    useEffect(() => {\n      const unsub = this._core._reactor.subscribePresence(\n        this.type,\n        this.id,\n        opts,\n        (data) => {\n          setState(data);\n        },\n      );\n\n      return unsub;\n    }, [this.id, opts.user, opts.peers?.join(), opts.keys?.join()]);\n\n    return {\n      ...state,\n      publishPresence: (data) => {\n        this._core._reactor.publishPresence(this.type, this.id, data);\n      },\n    };\n  };\n\n  /**\n   * Publishes presence data to a room\n   *\n   * @see https://instantdb.com/docs/presence-and-topics\n   * @example\n   *  function App({ roomId }) {\n   *    db.room(roomType, roomId).useSyncPresence({ name, avatar, color });\n   *\n   *    // ...\n   *  }\n   */\n  useSyncPresence = (\n    data: Partial<RoomSchema[RoomType][\"presence\"]>,\n    deps?: any[],\n  ): void => {\n    useEffect(() => this._core._reactor.joinRoom(this.id), [this.id]);\n    useEffect(() => {\n      return this._core._reactor.publishPresence(this.type, this.id, data);\n    }, [this.type, this.id, deps ?? JSON.stringify(data)]);\n  };\n\n  /**\n   * Manage typing indicator state\n   *\n   * @see https://instantdb.com/docs/presence-and-topics\n   * @example\n   *  function App({ roomId }) {\n   *    const {\n   *      active,\n   *      setActive,\n   *      inputProps,\n   *    } = db.room(roomType, roomId).useTypingIndicator(\"chat-input\", opts);\n   *\n   *    return <input {...inputProps} />;\n   *  }\n   */\n  useTypingIndicator = (\n    inputName: string,\n    opts: TypingIndicatorOpts = {},\n  ): TypingIndicatorHandle<RoomSchema[RoomType][\"presence\"]> => {\n    const timeout = useTimeout();\n\n    const onservedPresence = this.usePresence({\n      keys: [inputName],\n    });\n\n    const active = useMemo(() => {\n      const presenceSnapshot = this._core._reactor.getPresence(\n        this.type,\n        this.id,\n      );\n\n      return opts?.writeOnly\n        ? []\n        : Object.values(presenceSnapshot?.peers ?? {}).filter(\n            (p) => p[inputName] === true,\n          );\n    }, [opts?.writeOnly, onservedPresence]);\n\n    const setActive = (isActive: boolean) => {\n      this._core._reactor.publishPresence(this.type, this.id, {\n        [inputName]: isActive,\n      } as unknown as Partial<RoomSchema[RoomType]>);\n\n      if (!isActive) return;\n\n      if (opts?.timeout === null || opts?.timeout === 0) return;\n\n      timeout.set(opts?.timeout ?? defaultActivityStopTimeout, () => {\n        this._core._reactor.publishPresence(this.type, this.id, {\n          [inputName]: null,\n        } as Partial<RoomSchema[RoomType]>);\n      });\n    };\n\n    return {\n      active,\n      setActive: (a: boolean) => {\n        setActive(a);\n      },\n      inputProps: {\n        onKeyDown: (e: KeyboardEvent) => {\n          const isEnter = opts?.stopOnEnter && e.key === \"Enter\";\n          const isActive = !isEnter;\n\n          setActive(isActive);\n        },\n        onBlur: () => {\n          setActive(false);\n        },\n      },\n    };\n  };\n}\n\nconst defaultAuthState = {\n  isLoading: true,\n  user: undefined,\n  error: undefined,\n};\n\nexport abstract class InstantReact<\n  Schema extends InstantGraph<any, any> | {} = {},\n  RoomSchema extends RoomSchemaShape = {},\n  WithCardinalityInference extends boolean = false,\n> implements IDatabase<Schema, RoomSchema, WithCardinalityInference>\n{\n  public withCardinalityInference?: WithCardinalityInference;\n  public tx =\n    txInit<\n      Schema extends InstantGraph<any, any> ? Schema : InstantGraph<any, any>\n    >();\n\n  public auth: Auth;\n  public storage: Storage;\n  public _core: InstantClient<Schema, RoomSchema, WithCardinalityInference>;\n\n  static Storage?: any;\n  static NetworkListener?: any;\n\n  constructor(config: Config | ConfigWithSchema<any>) {\n    this._core = _init_internal<Schema, RoomSchema, WithCardinalityInference>(\n      config,\n      // @ts-expect-error because TS can't resolve subclass statics\n      this.constructor.Storage,\n      // @ts-expect-error because TS can't resolve subclass statics\n      this.constructor.NetworkListener,\n    );\n    this.auth = this._core.auth;\n    this.storage = this._core.storage;\n  }\n\n  getLocalId = (name: string) => {\n    return this._core.getLocalId(name);\n  };\n\n  /**\n   * Obtain a handle to a room, which allows you to listen to topics and presence data\n   *\n   * If you don't provide a `type` or `id`, Instant will default to `_defaultRoomType` and `_defaultRoomId`\n   * as the room type and id, respectively.\n   *\n   * @see https://instantdb.com/docs/presence-and-topics\n   *\n   * @example\n   *  const {\n   *   useTopicEffect,\n   *   usePublishTopic,\n   *   useSyncPresence,\n   *   useTypingIndicator,\n   * } = db.room(roomType, roomId);\n   */\n  room<RoomType extends keyof RoomSchema>(\n    type: RoomType = \"_defaultRoomType\" as RoomType,\n    id: string = \"_defaultRoomId\",\n  ) {\n    return new InstantReactRoom<Schema, RoomSchema, RoomType>(\n      this._core,\n      type,\n      id,\n    );\n  }\n\n  /**\n   * Use this to write data! You can create, update, delete, and link objects\n   *\n   * @see https://instantdb.com/docs/instaml\n   *\n   * @example\n   *   // Create a new object in the `goals` namespace\n   *   const goalId = id();\n   *   db.transact(tx.goals[goalId].update({title: \"Get fit\"}))\n   *\n   *   // Update the title\n   *   db.transact(tx.goals[goalId].update({title: \"Get super fit\"}))\n   *\n   *   // Delete it\n   *   db.transact(tx.goals[goalId].delete())\n   *\n   *   // Or create an association:\n   *   todoId = id();\n   *   db.transact([\n   *    tx.todos[todoId].update({ title: 'Go on a run' }),\n   *    tx.goals[goalId].link({todos: todoId}),\n   *  ])\n   */\n  transact = (\n    chunks: TransactionChunk<any, any> | TransactionChunk<any, any>[],\n  ) => {\n    return this._core.transact(chunks);\n  };\n\n  /**\n   * Use this to query your data!\n   *\n   * @see https://instantdb.com/docs/instaql\n   *\n   * @example\n   *  // listen to all goals\n   *  db.useQuery({ goals: {} })\n   *\n   *  // goals where the title is \"Get Fit\"\n   *  db.useQuery({ goals: { $: { where: { title: \"Get Fit\" } } } })\n   *\n   *  // all goals, _alongside_ their todos\n   *  db.useQuery({ goals: { todos: {} } })\n   *\n   *  // skip if `user` is not logged in\n   *  db.useQuery(auth.user ? { goals: {} } : null)\n   */\n  useQuery = <\n    Q extends Schema extends InstantGraph<any, any>\n      ? InstaQLQueryParams<Schema>\n      : Exactly<Query, Q>,\n  >(\n    query: null | Q,\n  ): LifecycleSubscriptionState<Q, Schema, WithCardinalityInference> => {\n    return useQuery(this._core, query).state;\n  };\n\n  /**\n   * Listen for the logged in state. This is useful\n   * for deciding when to show a login screen.\n   *\n   * Check out the docs for an example `Login` component too!\n   *\n   * @see https://instantdb.com/docs/auth\n   * @example\n   *  function App() {\n   *    const { isLoading, user, error } = db.useAuth()\n   *    if (isLoading) {\n   *      return <div>Loading...</div>\n   *    }\n   *    if (error) {\n   *      return <div>Uh oh! {error.message}</div>\n   *    }\n   *    if (user) {\n   *      return <Main user={user} />\n   *    }\n   *    return <Login />\n   *  }\n   *\n   */\n  useAuth = (): AuthState => {\n    // We use a ref to store the result of the query.\n    // This is becuase `useSyncExternalStore` uses `Object.is`\n    // to compare the previous and next state.\n    // If we don't use a ref, the state will always be considered different, so\n    // the component will always re-render.\n    const resultCacheRef = useRef<AuthState>(\n      this._core._reactor._currentUserCached,\n    );\n\n    // Similar to `resultCacheRef`, `useSyncExternalStore` will unsubscribe\n    // if `subscribe` changes, so we use `useCallback` to memoize the function.\n    const subscribe = useCallback((cb: Function) => {\n      const unsubscribe = this._core.subscribeAuth((auth) => {\n        resultCacheRef.current = { isLoading: false, ...auth };\n        cb();\n      });\n\n      return unsubscribe;\n    }, []);\n\n    const state = useSyncExternalStore<AuthState>(\n      subscribe,\n      () => resultCacheRef.current,\n      () => defaultAuthState,\n    );\n    return state;\n  };\n\n  /**\n   * Use this for one-off queries.\n   * Returns local data if available, otherwise fetches from the server.\n   * Because we want to avoid stale data, this method will throw an error\n   * if the user is offline or there is no active connection to the server.\n   *\n   * @see https://instantdb.com/docs/instaql\n   *\n   * @example\n   *\n   *  const resp = await db.queryOnce({ goals: {} });\n   *  console.log(resp.data.goals)\n   */\n  queryOnce = <\n    Q extends Schema extends InstantGraph<any, any>\n      ? InstaQLQueryParams<Schema>\n      : Exactly<Query, Q>,\n  >(\n    query: Q,\n  ): Promise<{\n    data: QueryResponse<Q, Schema, WithCardinalityInference>;\n    pageInfo: PageInfoResponse<Q>;\n  }> => {\n    return this._core.queryOnce(query);\n  };\n}\n"]}