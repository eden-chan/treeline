{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import Reactor from \"./Reactor\";\nimport {\n  tx,\n  txInit,\n  lookup,\n  getOps,\n  type TxChunk,\n  type TransactionChunk,\n} from \"./instatx\";\nimport weakHash from \"./utils/weakHash\";\nimport id from \"./utils/uuid\";\nimport IndexedDBStorage from \"./IndexedDBStorage\";\nimport WindowNetworkListener from \"./WindowNetworkListener\";\nimport { i } from \"./schema\";\nimport { createDevtool } from \"./devtool\";\n\nimport type {\n  PresenceOpts,\n  PresenceResponse,\n  PresenceSlice,\n  RoomSchemaShape,\n} from \"./presence\";\nimport type { IDatabase } from \"./coreTypes\";\nimport type {\n  Query,\n  QueryResponse,\n  PageInfoResponse,\n  Exactly,\n  InstantObject,\n  InstaQLQueryParams,\n} from \"./queryTypes\";\nimport type { AuthState, User, AuthResult } from \"./clientTypes\";\nimport type {\n  InstantQuery,\n  InstantQueryResult,\n  InstantSchema,\n  InstantEntity,\n  InstantSchemaDatabase,\n} from \"./helperTypes\";\nimport type {\n  AttrsDefs,\n  CardinalityKind,\n  DataAttrDef,\n  EntitiesDef,\n  EntitiesWithLinks,\n  EntityDef,\n  InstantGraph,\n  LinkAttrDef,\n  LinkDef,\n  LinksDef,\n  ResolveAttrs,\n  ValueTypes,\n} from \"./schemaTypes\";\n\nconst defaultOpenDevtool = true;\n\n// types\n\nexport type Config = {\n  appId: string;\n  websocketURI?: string;\n  apiURI?: string;\n  devtool?: boolean;\n};\n\nexport type ConfigWithSchema<S extends InstantGraph<any, any>> = Config & {\n  schema: S;\n};\n\nexport type TransactionResult = {\n  status: \"synced\" | \"enqueued\";\n  clientId: string;\n};\n\nexport type RoomHandle<PresenceShape, TopicsByKey> = {\n  leaveRoom: () => void;\n  publishTopic: <Key extends keyof TopicsByKey>(\n    topic: Key,\n    data: TopicsByKey[Key],\n  ) => void;\n  subscribeTopic: <Key extends keyof TopicsByKey>(\n    topic: Key,\n    onEvent: (event: TopicsByKey[Key], peer: PresenceShape) => void,\n  ) => () => void;\n  publishPresence: (data: Partial<PresenceShape>) => void;\n  getPresence: <Keys extends keyof PresenceShape>(\n    opts: PresenceOpts<PresenceShape, Keys>,\n  ) => PresenceResponse<PresenceShape, Keys>;\n  subscribePresence: <Keys extends keyof PresenceShape>(\n    opts: PresenceOpts<PresenceShape, Keys>,\n    onChange: (slice: PresenceResponse<PresenceShape, Keys>) => void,\n  ) => () => void;\n};\n\ntype AuthToken = string;\n\ntype SubscriptionState<Q, Schema, WithCardinalityInference extends boolean> =\n  | { error: { message: string }; data: undefined; pageInfo: undefined }\n  | {\n      error: undefined;\n      data: QueryResponse<Q, Schema, WithCardinalityInference>;\n      pageInfo: PageInfoResponse<Q>;\n    };\n\ntype LifecycleSubscriptionState<\n  Q,\n  Schema,\n  WithCardinalityInference extends boolean,\n> = SubscriptionState<Q, Schema, WithCardinalityInference> & {\n  isLoading: boolean;\n};\n\ntype UnsubscribeFn = () => void;\n\n// consts\n\nconst defaultConfig = {\n  apiURI: \"https://api.instantdb.com\",\n  websocketURI: \"wss://api.instantdb.com/runtime/session\",\n};\n\n// hmr\nfunction initGlobalInstantCoreStore(): Record<\n  string,\n  InstantCore<any, any, any>\n> {\n  globalThis.__instantDbStore = globalThis.__instantDbStore ?? {};\n  return globalThis.__instantDbStore;\n}\n\nconst globalInstantCoreStore = initGlobalInstantCoreStore();\n\nfunction init_experimental<\n  Schema extends InstantGraph<any, any, any>,\n  WithCardinalityInference extends boolean = true,\n>(\n  config: Config & {\n    schema: Schema;\n    cardinalityInference?: WithCardinalityInference;\n  },\n  Storage?: any,\n  NetworkListener?: any,\n): InstantCore<\n  Schema,\n  Schema extends InstantGraph<any, infer RoomSchema, any> ? RoomSchema : never,\n  WithCardinalityInference\n> {\n  return _init_internal<\n    Schema,\n    Schema extends InstantGraph<any, infer RoomSchema, any>\n      ? RoomSchema\n      : never,\n    WithCardinalityInference\n  >(config, Storage, NetworkListener);\n}\n\n// main\n\n/**\n *\n * The first step: init your application!\n *\n * Visit https://instantdb.com/dash to get your `appId` :)\n *\n * @example\n *  const db = init({ appId: \"my-app-id\" })\n *\n * // You can also provide a schema for type safety and editor autocomplete!\n *\n *  type Schema = {\n *    goals: {\n *      title: string\n *    }\n *  }\n *\n *  const db = init<Schema>({ appId: \"my-app-id\" })\n *\n */\nfunction init<Schema extends {} = {}, RoomSchema extends RoomSchemaShape = {}>(\n  config: Config,\n  Storage?: any,\n  NetworkListener?: any,\n): InstantCore<Schema, RoomSchema> {\n  return _init_internal(config, Storage, NetworkListener);\n}\n\nfunction _init_internal<\n  Schema extends {} | InstantGraph<any, any, any>,\n  RoomSchema extends RoomSchemaShape,\n  WithCardinalityInference extends boolean = false,\n>(\n  config: Config,\n  Storage?: any,\n  NetworkListener?: any,\n): InstantCore<Schema, RoomSchema, WithCardinalityInference> {\n  const existingClient = globalInstantCoreStore[config.appId] as InstantCore<\n    any,\n    RoomSchema,\n    WithCardinalityInference\n  >;\n\n  if (existingClient) {\n    return existingClient;\n  }\n\n  const reactor = new Reactor<RoomSchema>(\n    {\n      ...defaultConfig,\n      ...config,\n    },\n    Storage || IndexedDBStorage,\n    NetworkListener || WindowNetworkListener,\n  );\n\n  const client = new InstantCore<any, RoomSchema, WithCardinalityInference>(\n    reactor,\n  );\n  globalInstantCoreStore[config.appId] = client;\n\n  if (typeof window !== \"undefined\" && typeof window.location !== \"undefined\") {\n    const showDevtool =\n      // show widget by default?\n      (\"devtool\" in config ? Boolean(config.devtool) : defaultOpenDevtool) &&\n      // only run on localhost (dev env)\n      window.location.hostname === \"localhost\" &&\n      // used by dash and other internal consumers\n      !Boolean((globalThis as any)._nodevtool);\n\n    if (showDevtool) {\n      createDevtool(config.appId);\n    }\n  }\n\n  return client;\n}\n\nclass InstantCore<\n  Schema extends InstantGraph<any, any> | {} = {},\n  RoomSchema extends RoomSchemaShape = {},\n  WithCardinalityInference extends boolean = false,\n> implements IDatabase<Schema, RoomSchema, WithCardinalityInference>\n{\n  public withCardinalityInference?: WithCardinalityInference;\n  public _reactor: Reactor<RoomSchema>;\n  public auth: Auth;\n  public storage: Storage;\n\n  public tx =\n    txInit<\n      Schema extends InstantGraph<any, any> ? Schema : InstantGraph<any, any>\n    >();\n\n  constructor(reactor: Reactor<RoomSchema>) {\n    this._reactor = reactor;\n    this.auth = new Auth(this._reactor);\n    this.storage = new Storage(this._reactor);\n  }\n\n  /**\n   * Use this to write data! You can create, update, delete, and link objects\n   *\n   * @see https://instantdb.com/docs/instaml\n   *\n   * @example\n   *   // Create a new object in the `goals` namespace\n   *   const goalId = id();\n   *   db.transact(tx.goals[goalId].update({title: \"Get fit\"}))\n   *\n   *   // Update the title\n   *   db.transact(tx.goals[goalId].update({title: \"Get super fit\"}))\n   *\n   *   // Delete it\n   *   db.transact(tx.goals[goalId].delete())\n   *\n   *   // Or create an association:\n   *   todoId = id();\n   *   db.transact([\n   *    tx.todos[todoId].update({ title: 'Go on a run' }),\n   *    tx.goals[goalId].link({todos: todoId}),\n   *  ])\n   */\n  transact(\n    chunks: TransactionChunk<any, any> | TransactionChunk<any, any>[],\n  ): Promise<TransactionResult> {\n    return this._reactor.pushTx(chunks);\n  }\n\n  getLocalId(name: string): Promise<string> {\n    return this._reactor.getLocalId(name);\n  }\n\n  /**\n   * Use this to query your data!\n   *\n   * @see https://instantdb.com/docs/instaql\n   *\n   * @example\n   *  // listen to all goals\n   *  db.subscribeQuery({ goals: {} }, (resp) => {\n   *    console.log(resp.data.goals)\n   *  })\n   *\n   *  // goals where the title is \"Get Fit\"\n   *  db.subscribeQuery(\n   *    { goals: { $: { where: { title: \"Get Fit\" } } } },\n   *    (resp) => {\n   *      console.log(resp.data.goals)\n   *    }\n   *  )\n   *\n   *  // all goals, _alongside_ their todos\n   *  db.subscribeQuery({ goals: { todos: {} } }, (resp) => {\n   *    console.log(resp.data.goals)\n   *  });\n   */\n  subscribeQuery<\n    Q extends Schema extends InstantGraph<any, any>\n      ? InstaQLQueryParams<Schema>\n      : Exactly<Query, Q>,\n  >(\n    query: Q,\n    cb: (resp: SubscriptionState<Q, Schema, WithCardinalityInference>) => void,\n  ) {\n    return this._reactor.subscribeQuery(query, cb);\n  }\n\n  /**\n   * Listen for the logged in state. This is useful\n   * for deciding when to show a login screen.\n   *\n   * @see https://instantdb.com/docs/auth\n   * @example\n   *   const unsub = db.subscribeAuth((auth) => {\n   *     if (auth.user) {\n   *     console.log('logged in as', auth.user.email)\n   *    } else {\n   *      console.log('logged out')\n   *    }\n   *  })\n   */\n  subscribeAuth(cb: (auth: AuthResult) => void): UnsubscribeFn {\n    return this._reactor.subscribeAuth(cb);\n  }\n\n  /**\n   * Join a room to publish and subscribe to topics and presence.\n   *\n   * @see https://instantdb.com/docs/presence-and-topics\n   * @example\n   * // init\n   * const db = init();\n   * const room = db.joinRoom(roomType, roomId);\n   * // usage\n   * const unsubscribeTopic = room.subscribeTopic(\"foo\", console.log);\n   * const unsubscribePresence = room.subscribePresence({}, console.log);\n   * room.publishTopic(\"hello\", { message: \"hello world!\" });\n   * room.publishPresence({ name: \"joe\" });\n   * // later\n   * unsubscribePresence();\n   * unsubscribeTopic();\n   * room.leaveRoom();\n   */\n  joinRoom<RoomType extends keyof RoomSchema>(\n    roomType: RoomType = \"_defaultRoomType\" as RoomType,\n    roomId: string = \"_defaultRoomId\",\n  ): RoomHandle<\n    RoomSchema[RoomType][\"presence\"],\n    RoomSchema[RoomType][\"topics\"]\n  > {\n    const leaveRoom = this._reactor.joinRoom(roomId);\n\n    return {\n      leaveRoom,\n      subscribeTopic: (topic, onEvent) =>\n        this._reactor.subscribeTopic(roomId, topic, onEvent),\n      subscribePresence: (opts, onChange) =>\n        this._reactor.subscribePresence(roomType, roomId, opts, onChange),\n      publishTopic: (topic, data) =>\n        this._reactor.publishTopic({ roomType, roomId, topic, data }),\n      publishPresence: (data) =>\n        this._reactor.publishPresence(roomType, roomId, data),\n      getPresence: (opts) => this._reactor.getPresence(roomType, roomId, opts),\n    };\n  }\n\n  shutdown() {\n    delete globalInstantCoreStore[this._reactor.config.appId];\n    this._reactor.shutdown();\n  }\n\n  /**\n   * Use this for one-off queries.\n   * Returns local data if available, otherwise fetches from the server.\n   * Because we want to avoid stale data, this method will throw an error\n   * if the user is offline or there is no active connection to the server.\n   *\n   * @see https://instantdb.com/docs/instaql\n   *\n   * @example\n   *\n   *  const resp = await db.queryOnce({ goals: {} });\n   *  console.log(resp.data.goals)\n   */\n  queryOnce<\n    Q extends Schema extends InstantGraph<any, any>\n      ? InstaQLQueryParams<Schema>\n      : Exactly<Query, Q>,\n  >(\n    query: Q,\n  ): Promise<{\n    data: QueryResponse<Q, Schema, WithCardinalityInference>;\n    pageInfo: PageInfoResponse<Q>;\n  }> {\n    return this._reactor.queryOnce(query);\n  }\n}\n\n/**\n * Functions to log users in and out.\n *\n * @see https://instantdb.com/docs/auth\n */\nclass Auth {\n  constructor(private db: Reactor) {}\n\n  /**\n   * Sends a magic code to the user's email address.\n   *\n   * Once you send the magic code, see {@link auth.signInWithMagicCode} to let the\n   * user verify.\n   *\n   * @see https://instantdb.com/docs/auth\n   * @example\n   *  db.auth.sendMagicCode({email: \"example@gmail.com\"})\n   *    .catch((err) => console.error(err.body?.message))\n   */\n  sendMagicCode = (params: { email: string }) => {\n    return this.db.sendMagicCode(params);\n  };\n  /**\n   * Verify a magic code that was sent to the user's email address.\n   *\n   * @see https://instantdb.com/docs/auth\n   *\n   * @example\n   *  db.auth.signInWithMagicCode({email: \"example@gmail.com\", code: \"123456\"})\n   *       .catch((err) => console.error(err.body?.message))\n   */\n  signInWithMagicCode = (params: { email: string; code: string }) => {\n    return this.db.signInWithMagicCode(params);\n  };\n\n  /**\n   * Sign in a user with a refresh toke\n   *\n   * @see https://instantdb.com/docs/backend#frontend-auth-sign-in-with-token\n   *\n   * @example\n   *   // Get the token from your backend\n   *   const token = await fetch('/signin', ...);\n   *   //Sign in\n   *   db.auth.signInWithToken(token);\n   */\n  signInWithToken = (token: AuthToken) => {\n    return this.db.signInWithCustomToken(token);\n  };\n\n  /**\n   * Create an authorization url to sign in with an external provider\n   *\n   * @see https://instantdb.com/docs/auth\n   *\n   * @example\n   *   // Get the authorization url from your backend\n   *   const url = db.auth.createAuthorizationUrl({\n   *     clientName: \"google\",\n   *     redirectURL: window.location.href,\n   *   });\n   *\n   *   // Put it in a sign in link\n   *   <a href={url}>Log in with Google</a>\n   */\n  createAuthorizationURL = (params: { clientName: string; redirectURL }) => {\n    return this.db.createAuthorizationURL(params);\n  };\n\n  /**\n   * Sign in with the id_token from an external provider like Google\n   *\n   * @see https://instantdb.com/docs/auth\n   * @example\n   *   db.auth\n   *  .signInWithIdToken({\n   *    // Token from external service\n   *    idToken: id_token,\n   *    // The name you gave the client when you registered it with Instant\n   *    clientName: \"google\",\n   *    // The nonce, if any, that you used when you initiated the auth flow\n   *    // with the external service.\n   *    nonce: your_nonce\n   *  })\n   *  .catch((err) => console.error(err.body?.message));\n   *\n   */\n  signInWithIdToken = (params: {\n    idToken: string;\n    clientName: string;\n    nonce?: string | undefined | null;\n  }) => {\n    return this.db.signInWithIdToken(params);\n  };\n\n  /**\n   * Sign in with the id_token from an external provider like Google\n   *\n   * @see https://instantdb.com/docs/auth\n   * @example\n   *   db.auth\n   *  .exchangeOAuthCode({\n   *    // code received in redirect from OAuth callback\n   *    code: code\n   *    // The PKCE code_verifier, if any, that you used when you\n   *    // initiated the auth flow\n   *    codeVerifier: your_code_verifier\n   *  })\n   *  .catch((err) => console.error(err.body?.message));\n   *\n   */\n  exchangeOAuthCode = (params: {\n    code: string;\n    codeVerifier: string | undefined | null;\n  }) => {\n    return this.db.exchangeCodeForToken(params);\n  };\n\n  /**\n   * OpenID Discovery path for use with tools like\n   * expo-auth-session that use auto-discovery of\n   * OAuth parameters.\n   *\n   * @see https://instantdb.com/docs/auth\n   * @example\n   *   const discovery = useAutoDiscovery(\n   *     db.auth.issuerURI()\n   *   );\n   */\n  issuerURI = () => {\n    return this.db.issuerURI();\n  };\n\n  /**\n   * Sign out the current user\n   */\n  signOut = () => {\n    return this.db.signOut();\n  };\n}\n\n/**\n * Functions to manage file storage.\n */\nclass Storage {\n  constructor(private db: Reactor) {}\n\n  /**\n   * Uploads file at the provided path.\n   *\n   * @see https://instantdb.com/docs/storage\n   * @example\n   *   const [file] = e.target.files; // result of file input\n   *   const isSuccess = await db.storage.upload('photos/demo.png', file);\n   */\n  upload = (pathname: string, file: File) => {\n    return this.db.upload(pathname, file);\n  };\n\n  /**\n   * @deprecated Use `db.storage.upload` instead\n   */\n  put = this.upload;\n\n  /**\n   * Retrieves a download URL for the provided path.\n   *\n   * @see https://instantdb.com/docs/storage\n   * @example\n   *   const url = await db.storage.getDownloadUrl('photos/demo.png');\n   */\n  getDownloadUrl = (pathname: string) => {\n    return this.db.getDownloadUrl(pathname);\n  };\n\n  /**\n   * Deletes a file by path name.\n   *\n   * @see https://instantdb.com/docs/storage\n   * @example\n   *   await db.storage.delete('photos/demo.png');\n   */\n  delete = (pathname: string) => {\n    return this.db.deleteFile(pathname);\n  };\n}\n\n// util\n\nfunction coerceQuery(o: any) {\n  // stringify and parse to remove undefined values\n  return JSON.parse(JSON.stringify(o));\n}\n\n// dev\n\nexport {\n  // bada bing bada boom\n  init,\n  init_experimental,\n  _init_internal,\n  id,\n  tx,\n  txInit,\n  lookup,\n\n  // cli\n  i,\n\n  // util\n  getOps,\n  coerceQuery,\n  weakHash,\n  IndexedDBStorage,\n  WindowNetworkListener,\n  InstantCore as InstantClient,\n  Auth,\n  Storage,\n\n  // og types\n  type IDatabase,\n  type RoomSchemaShape,\n  type Query,\n  type QueryResponse,\n  type PageInfoResponse,\n  type InstantObject,\n  type Exactly,\n  type TransactionChunk,\n  type AuthState,\n  type User,\n  type AuthToken,\n  type TxChunk,\n  type SubscriptionState,\n  type LifecycleSubscriptionState,\n\n  // presence types\n  type PresenceOpts,\n  type PresenceSlice,\n  type PresenceResponse,\n\n  // new query types\n  type InstaQLQueryParams,\n  type InstantQuery,\n  type InstantQueryResult,\n  type InstantSchema,\n  type InstantEntity,\n  type InstantSchemaDatabase,\n\n  // schema types\n  type AttrsDefs,\n  type CardinalityKind,\n  type DataAttrDef,\n  type EntitiesDef,\n  type EntitiesWithLinks,\n  type EntityDef,\n  type InstantGraph,\n  type LinkAttrDef,\n  type LinkDef,\n  type LinksDef,\n  type ResolveAttrs,\n  type ValueTypes,\n};\n"]}