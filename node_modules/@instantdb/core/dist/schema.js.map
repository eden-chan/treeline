{"version":3,"file":"schema.js","sourceRoot":"","sources":["../src/schema.ts"],"names":[],"mappings":";;;AAAA,+CAQuB;AAEvB,aAAa;AACb,MAAM;AAEN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH,SAAS,KAAK,CAGZ,QAA8B,EAAE,KAAY;IAC5C,OAAO,IAAI,0BAAY,CACrB,uBAAuB,CAA8B,QAAQ,EAAE,KAAK,CAAC;IACrE,0EAA0E;IAC1E,2DAA2D;IAC3D,2EAA2E;IAC3E,0EAA0E;IAC1E,4CAA4C;IAC5C,KAAsB,CACvB,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;;;GAcG;AACH,SAAS,MAAM,CACb,KAAY;IAEZ,OAAO,IAAI,uBAAS,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAClC,CAAC;AAED,SAAS,MAAM;IAIb,OAAO,IAAI,yBAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AACzC,CAAC;AAED,SAAS,MAAM;IACb,OAAO,IAAI,yBAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AACzC,CAAC;AAED,SAAS,OAAO;IACd,OAAO,IAAI,yBAAW,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC1C,CAAC;AAED,SAAS,IAAI;IACX,OAAO,IAAI,yBAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACvC,CAAC;AAED,SAAS,GAAG;IACV,OAAO,IAAI,yBAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACvC,CAAC;AAED,aAAa;AACb,WAAW;AAEX,SAAS,uBAAuB,CAI9B,QAA8B,EAAE,KAAY;;IAC5C,MAAM,UAAU,GAAe,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;IAEpD,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;QAC3C,MAAA,UAAU,CAAC,GAAG,OAAC,OAAO,CAAC,OAAO,CAAC,EAAY,eAAM,EAAE,EAAC;QACpD,MAAA,UAAU,CAAC,GAAG,OAAC,OAAO,CAAC,OAAO,CAAC,EAAY,eAAM,EAAE,EAAC;QAEpD,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,EAAY,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG;YACpE,UAAU,EAAE,OAAO,CAAC,OAAO,CAAC,EAAY;YACxC,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,GAAG;SACjC,CAAC;QAEF,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,EAAY,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG;YACpE,UAAU,EAAE,OAAO,CAAC,OAAO,CAAC,EAAY;YACxC,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,GAAG;SACjC,CAAC;IACJ,CAAC;IAED,MAAM,gBAAgB,GAAG,MAAM,CAAC,WAAW,CACzC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC;QAC5C,IAAI;QACJ,IAAI,uBAAS,CAAC,GAAG,CAAC,KAAK,kCAClB,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,GACpB,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EACvB;KACH,CAAC,CACH,CAAC;IAEF,OAAO,gBAAoC,CAAC;AAC9C,CAAC;AAOY,QAAA,CAAC,GAAG;IACf,aAAa;IACb,KAAK;IACL,MAAM;IACN,cAAc;IACd,MAAM;IACN,MAAM;IACN,OAAO;IACP,IAAI;IACJ,GAAG;CACJ,CAAC","sourcesContent":["import {\n  EntityDef,\n  DataAttrDef,\n  InstantGraph,\n  type EntitiesDef,\n  type AttrsDefs,\n  type EntitiesWithLinks,\n  type LinksDef,\n} from \"./schemaTypes\";\n\n// ==========\n// API\n\n/**\n * Accepts entities and links and merges them into a single graph definition.\n *\n * @see https://instantdb.com/docs/schema#defining-entities\n * @example\n *   export default i.graph(\n *     {\n *       posts: i.entity({\n *         title: i.string(),\n *         body: i.string(),\n *       }),\n *       comments: i.entity({\n *         body: i.string(),\n *       }),\n *     },\n *     {\n *       postsComments: {\n *         forward: {\n *           on: \"posts\",\n *           has: \"many\",\n *           label: \"comments\",\n *         },\n *         reverse: {\n *           on: \"comments\",\n *           has: \"one\",\n *           label: \"post\",\n *         },\n *       },\n *     },\n *   );\n */\nfunction graph<\n  EntitiesWithoutLinks extends EntitiesDef,\n  const Links extends LinksDef<EntitiesWithoutLinks>,\n>(entities: EntitiesWithoutLinks, links: Links) {\n  return new InstantGraph(\n    enrichEntitiesWithLinks<EntitiesWithoutLinks, Links>(entities, links),\n    // (XXX): LinksDef<any> stems from TypeScriptâ€™s inability to reconcile the\n    // type EntitiesWithLinks<EntitiesWithoutLinks, Links> with\n    // EntitiesWithoutLinks. TypeScript is strict about ensuring that types are\n    // correctly aligned and does not allow for substituting a type that might\n    // be broader or have additional properties.\n    links as LinksDef<any>,\n  );\n}\n\n/**\n * Creates an entity definition, to be used in conjunction with `i.graph`.\n *\n * @see https://instantdb.com/docs/schema\n * @example\n *   {\n *     posts: i.entity({\n *       title: i.string(),\n *       body: i.string(),\n *     }),\n *     comments: i.entity({\n *       body: i.string(),\n *     })\n *   }\n */\nfunction entity<Attrs extends AttrsDefs>(\n  attrs: Attrs,\n): EntityDef<Attrs, {}, void> {\n  return new EntityDef(attrs, {});\n}\n\nfunction string<StringEnum extends string = string>(): DataAttrDef<\n  StringEnum,\n  true\n> {\n  return new DataAttrDef(\"string\", true);\n}\n\nfunction number(): DataAttrDef<number, true> {\n  return new DataAttrDef(\"number\", true);\n}\n\nfunction boolean(): DataAttrDef<boolean, true> {\n  return new DataAttrDef(\"boolean\", true);\n}\n\nfunction json<T = any>(): DataAttrDef<T, true> {\n  return new DataAttrDef(\"json\", true);\n}\n\nfunction any(): DataAttrDef<any, true> {\n  return new DataAttrDef(\"json\", true);\n}\n\n// ==========\n// internal\n\nfunction enrichEntitiesWithLinks<\n  EntitiesWithoutLinks extends EntitiesDef,\n  Links extends LinksDef<any>,\n  EnrichedEntities = EntitiesWithLinks<EntitiesWithoutLinks, Links>,\n>(entities: EntitiesWithoutLinks, links: Links): EnrichedEntities {\n  const linksIndex: LinksIndex = { fwd: {}, rev: {} };\n\n  for (const linkDef of Object.values(links)) {\n    linksIndex.fwd[linkDef.forward.on as string] ||= {};\n    linksIndex.rev[linkDef.reverse.on as string] ||= {};\n\n    linksIndex.fwd[linkDef.forward.on as string][linkDef.forward.label] = {\n      entityName: linkDef.reverse.on as string,\n      cardinality: linkDef.forward.has,\n    };\n\n    linksIndex.rev[linkDef.reverse.on as string][linkDef.reverse.label] = {\n      entityName: linkDef.forward.on as string,\n      cardinality: linkDef.reverse.has,\n    };\n  }\n\n  const enrichedEntities = Object.fromEntries(\n    Object.entries(entities).map(([name, def]) => [\n      name,\n      new EntityDef(def.attrs, {\n        ...linksIndex.fwd[name],\n        ...linksIndex.rev[name],\n      }),\n    ]),\n  );\n\n  return enrichedEntities as EnrichedEntities;\n}\n\ntype LinksIndex = Record<\n  \"fwd\" | \"rev\",\n  Record<string, Record<string, { entityName: string; cardinality: string }>>\n>;\n\nexport const i = {\n  // constructs\n  graph,\n  entity,\n  // value types\n  string,\n  number,\n  boolean,\n  json,\n  any,\n};\n"]}