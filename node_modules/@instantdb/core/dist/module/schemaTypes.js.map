{"version":3,"file":"schemaTypes.js","sourceRoot":"","sources":["../../src/schemaTypes.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,WAAW;IAItB,YACS,UAAsB,EACtB,WAAwB;QADxB,eAAU,GAAV,UAAU,CAAY;QACtB,gBAAW,GAAX,WAAW,CAAa;IAC9B,CAAC;CACL;AAED,MAAM,OAAO,WAAW;IACtB,YACS,SAAqB,EACrB,QAAoB,EACpB,SAIH,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE;QAN9B,cAAS,GAAT,SAAS,CAAY;QACrB,aAAQ,GAAR,QAAQ,CAAY;QACpB,WAAM,GAAN,MAAM,CAIwB;IACpC,CAAC;IAEJ,QAAQ;QACN,OAAO,IAAI,WAAW,CAAmB,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAClE,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,WAAW,CACpB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,QAAQ,kCAER,IAAI,CAAC,MAAM,KACd,MAAM,EAAE,IAAI,IAEf,CAAC;IACJ,CAAC;IAED,OAAO;QACL,OAAO,IAAI,WAAW,CACpB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,QAAQ,kCAER,IAAI,CAAC,MAAM,KACd,OAAO,EAAE,IAAI,IAEhB,CAAC;IACJ,CAAC;CAQF;AAED,MAAM,OAAO,YAAY;IAKvB,YACS,QAAkB,EAClB,KAAY;QADZ,aAAQ,GAAR,QAAQ,CAAU;QAClB,UAAK,GAAL,KAAK,CAAO;IAClB,CAAC;IAEJ,cAAc;QACZ,OAAO,IAAI,YAAY,CACrB,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,KAAK,CACX,CAAC;IACJ,CAAC;CACF;AAWD,MAAM,OAAO,SAAS;IAKpB,YACS,KAAY,EACZ,KAAY;QADZ,UAAK,GAAL,KAAK,CAAO;QACZ,UAAK,GAAL,KAAK,CAAO;IAClB,CAAC;IAEJ,MAAM;QAYJ,OAAO,IAAI,SAAS,CAAwB,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACtE,CAAC;CACF","sourcesContent":["import type { RoomSchemaShape } from \"./presence\";\n\nexport class LinkAttrDef<\n  Cardinality extends CardinalityKind,\n  EntityName extends string,\n> {\n  constructor(\n    public entityName: EntityName,\n    public cardinality: Cardinality,\n  ) {}\n}\n\nexport class DataAttrDef<ValueType, IsRequired extends boolean> {\n  constructor(\n    public valueType: ValueTypes,\n    public required: IsRequired,\n    public config: {\n      indexed: boolean;\n      unique: boolean;\n      // clientValidator?: (value: ValueType) => boolean;\n    } = { indexed: false, unique: false },\n  ) {}\n\n  optional() {\n    return new DataAttrDef<ValueType, false>(this.valueType, false);\n  }\n\n  unique() {\n    return new DataAttrDef<ValueType, IsRequired>(\n      this.valueType,\n      this.required,\n      {\n        ...this.config,\n        unique: true,\n      },\n    );\n  }\n\n  indexed() {\n    return new DataAttrDef<ValueType, IsRequired>(\n      this.valueType,\n      this.required,\n      {\n        ...this.config,\n        indexed: true,\n      },\n    );\n  }\n\n  // clientValidate(clientValidator: (value: ValueType) => boolean) {\n  //   return new DataAttrDef(this.valueType, this.required, {\n  //     ...this.config,\n  //     clientValidator,\n  //   });\n  // }\n}\n\nexport class InstantGraph<\n  Entities extends EntitiesDef,\n  Links extends LinksDef<Entities>,\n  RoomSchema extends RoomSchemaShape = {},\n> {\n  constructor(\n    public entities: Entities,\n    public links: Links,\n  ) {}\n\n  withRoomSchema<_RoomSchema extends RoomSchemaShape>() {\n    return new InstantGraph<Entities, Links, _RoomSchema>(\n      this.entities,\n      this.links,\n    );\n  }\n}\n\n// ==========\n// base types\n\nexport type ValueTypes = \"string\" | \"number\" | \"boolean\" | \"json\";\n\nexport type CardinalityKind = \"one\" | \"many\";\n\nexport type AttrsDefs = Record<string, DataAttrDef<any, any>>;\n\nexport class EntityDef<\n  Attrs extends AttrsDefs,\n  Links extends Record<string, LinkAttrDef<any, any>>,\n  AsType,\n> {\n  constructor(\n    public attrs: Attrs,\n    public links: Links,\n  ) {}\n\n  asType<\n    _AsType extends Partial<{\n      [AttrName in keyof Attrs]: Attrs[AttrName] extends DataAttrDef<\n        infer ValueType,\n        infer IsRequired\n      >\n        ? IsRequired extends true\n          ? ValueType\n          : ValueType | undefined\n        : never;\n    }>,\n  >() {\n    return new EntityDef<Attrs, Links, _AsType>(this.attrs, this.links);\n  }\n}\n\nexport type EntitiesDef = Record<string, EntityDef<any, any, any>>;\n\nexport type LinksDef<Entities extends EntitiesDef> = Record<\n  string,\n  LinkDef<\n    Entities,\n    keyof Entities,\n    string,\n    CardinalityKind,\n    keyof Entities,\n    string,\n    CardinalityKind\n  >\n>;\n\nexport type LinkDef<\n  Entities extends EntitiesDef,\n  FwdEntity extends keyof Entities,\n  FwdAttr extends string,\n  FwdCardinality extends CardinalityKind,\n  RevEntity extends keyof Entities,\n  RevAttr extends string,\n  RevCardinality extends CardinalityKind,\n> = {\n  forward: {\n    on: FwdEntity;\n    label: FwdAttr;\n    has: FwdCardinality;\n  };\n  reverse: {\n    on: RevEntity;\n    label: RevAttr;\n    has: RevCardinality;\n  };\n};\n\n// ==========\n// derived types\n\nexport type EntitiesWithLinks<\n  Entities extends EntitiesDef,\n  Links extends LinksDef<Entities>,\n> = {\n  [EntityName in keyof Entities]: EntityDef<\n    Entities[EntityName][\"attrs\"],\n    EntityForwardLinksMap<EntityName, Entities, Links> &\n      EntityReverseLinksMap<EntityName, Entities, Links>,\n    Entities[EntityName] extends EntityDef<any, any, infer O>\n      ? O extends void\n        ? void\n        : O\n      : void\n  >;\n};\n\ntype EntityForwardLinksMap<\n  EntityName extends keyof Entities,\n  Entities extends EntitiesDef,\n  Links extends LinksDef<Entities>,\n  LinkIndexFwd = LinksIndexedByEntity<Entities, Links, \"reverse\">,\n> = EntityName extends keyof LinkIndexFwd\n  ? {\n      [LinkName in keyof LinkIndexFwd[EntityName]]: LinkIndexFwd[EntityName][LinkName] extends LinkDef<\n        Entities,\n        infer RelatedEntityName,\n        any,\n        any,\n        any,\n        any,\n        infer Cardinality\n      >\n        ? {\n            entityName: RelatedEntityName;\n            cardinality: Cardinality;\n          }\n        : never;\n    }\n  : {};\n\ntype EntityReverseLinksMap<\n  EntityName extends keyof Entities,\n  Entities extends EntitiesDef,\n  Links extends LinksDef<Entities>,\n  RevLinkIndex = LinksIndexedByEntity<Entities, Links, \"forward\">,\n> = EntityName extends keyof RevLinkIndex\n  ? {\n      [LinkName in keyof RevLinkIndex[EntityName]]: RevLinkIndex[EntityName][LinkName] extends LinkDef<\n        Entities,\n        any,\n        any,\n        infer Cardinality,\n        infer RelatedEntityName,\n        any,\n        any\n      >\n        ? {\n            entityName: RelatedEntityName;\n            cardinality: Cardinality;\n          }\n        : never;\n    }\n  : {};\n\ntype LinksIndexedByEntity<\n  Entities extends EntitiesDef,\n  Links extends LinksDef<Entities>,\n  Direction extends \"forward\" | \"reverse\",\n> = {\n  [FwdEntity in keyof Entities]: {\n    [LinkName in keyof Links as Links[LinkName][Direction][\"on\"] extends FwdEntity\n      ? Links[LinkName][Direction][\"label\"]\n      : never]: Links[LinkName] extends LinkDef<\n      Entities,\n      infer FwdEntity,\n      infer FwdAttr,\n      infer FwdCardinality,\n      infer RevEntity,\n      infer RevAttr,\n      infer RevCardinality\n    >\n      ? LinkDef<\n          Entities,\n          FwdEntity,\n          FwdAttr,\n          FwdCardinality,\n          RevEntity,\n          RevAttr,\n          RevCardinality\n        >\n      : never;\n  };\n};\n\nexport type ResolveAttrs<\n  Entities extends EntitiesDef,\n  EntityName extends keyof Entities,\n  ResolvedAttrs = {\n    [AttrName in keyof Entities[EntityName][\"attrs\"]]: Entities[EntityName][\"attrs\"][AttrName] extends DataAttrDef<\n      infer ValueType,\n      infer IsRequired\n    >\n      ? IsRequired extends true\n        ? ValueType\n        : ValueType | undefined\n      : never;\n  },\n> =\n  Entities[EntityName] extends EntityDef<any, any, infer AsType>\n    ? AsType extends void\n      ? ResolvedAttrs\n      : Omit<ResolvedAttrs, keyof AsType> & AsType\n    : ResolvedAttrs;\n"]}