import { EntityDef, DataAttrDef, InstantGraph, type EntitiesDef, type AttrsDefs, type EntitiesWithLinks, type LinksDef } from "./schemaTypes";
/**
 * Accepts entities and links and merges them into a single graph definition.
 *
 * @see https://instantdb.com/docs/schema#defining-entities
 * @example
 *   export default i.graph(
 *     {
 *       posts: i.entity({
 *         title: i.string(),
 *         body: i.string(),
 *       }),
 *       comments: i.entity({
 *         body: i.string(),
 *       }),
 *     },
 *     {
 *       postsComments: {
 *         forward: {
 *           on: "posts",
 *           has: "many",
 *           label: "comments",
 *         },
 *         reverse: {
 *           on: "comments",
 *           has: "one",
 *           label: "post",
 *         },
 *       },
 *     },
 *   );
 */
declare function graph<EntitiesWithoutLinks extends EntitiesDef, const Links extends LinksDef<EntitiesWithoutLinks>>(entities: EntitiesWithoutLinks, links: Links): InstantGraph<EntitiesWithLinks<EntitiesWithoutLinks, Links>, LinksDef<any>, {}>;
/**
 * Creates an entity definition, to be used in conjunction with `i.graph`.
 *
 * @see https://instantdb.com/docs/schema
 * @example
 *   {
 *     posts: i.entity({
 *       title: i.string(),
 *       body: i.string(),
 *     }),
 *     comments: i.entity({
 *       body: i.string(),
 *     })
 *   }
 */
declare function entity<Attrs extends AttrsDefs>(attrs: Attrs): EntityDef<Attrs, {}, void>;
declare function string<StringEnum extends string = string>(): DataAttrDef<StringEnum, true>;
declare function number(): DataAttrDef<number, true>;
declare function boolean(): DataAttrDef<boolean, true>;
declare function json<T = any>(): DataAttrDef<T, true>;
declare function any(): DataAttrDef<any, true>;
export declare const i: {
    graph: typeof graph;
    entity: typeof entity;
    string: typeof string;
    number: typeof number;
    boolean: typeof boolean;
    json: typeof json;
    any: typeof any;
};
export {};
//# sourceMappingURL=schema.d.ts.map