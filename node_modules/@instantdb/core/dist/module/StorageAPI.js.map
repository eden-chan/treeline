{"version":3,"file":"StorageAPI.js","sourceRoot":"","sources":["../../src/StorageAPI.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAE1C,MAAM,UAAgB,kBAAkB;yDAAC,EACvC,MAAM,EACN,KAAK,EACL,QAAQ,EACR,YAAY,EACZ,QAAQ,GAAG,EAAE,GAOd;QACC,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,SAAS,CAAC,GAAG,MAAM,4BAA4B,EAAE;YACtE,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,aAAa,EAAE,UAAU,YAAY,EAAE;aACxC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,MAAM,EAAE,KAAK;gBACb,QAAQ,EAAE,QAAQ;aACnB,CAAC;SACH,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;CAAA;AAED,MAAM,UAAgB,MAAM,CAAC,YAAY,EAAE,IAAI;;QAC7C,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,YAAY,EAAE;YACzC,MAAM,EAAE,KAAK;YACb,IAAI,EAAE,IAAI;YACV,OAAO,EAAE;gBACP,cAAc,EAAE,IAAI,CAAC,IAAI;aAC1B;SACF,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC,EAAE,CAAC;IACrB,CAAC;CAAA;AAED,MAAM,UAAgB,cAAc;yDAAC,EACnC,MAAM,EACN,KAAK,EACL,IAAI,EACJ,YAAY,GAMb;QACC,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,SAAS,CAC9B,GAAG,MAAM,uCAAuC,KAAK,aAAa,kBAAkB,CAAC,IAAI,CAAC,EAAE,EAC5F;YACE,MAAM,EAAE,KAAK;YACb,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,aAAa,EAAE,UAAU,YAAY,EAAE;aACxC;SACF,CACF,CAAC;QAEF,OAAO,IAAI,CAAC;IACd,CAAC;CAAA;AAED,MAAM,UAAgB,UAAU;yDAAC,EAC/B,MAAM,EACN,KAAK,EACL,IAAI,EACJ,YAAY,GAMb;QACC,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,SAAS,CAC9B,GAAG,MAAM,yBAAyB,KAAK,aAAa,kBAAkB,CAAC,IAAI,CAAC,EAAE,EAC9E;YACE,MAAM,EAAE,QAAQ;YAChB,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,aAAa,EAAE,UAAU,YAAY,EAAE;aACxC;SACF,CACF,CAAC;QAEF,OAAO,IAAI,CAAC;IACd,CAAC;CAAA","sourcesContent":["import { jsonFetch } from \"./utils/fetch\";\n\nexport async function getSignedUploadUrl({\n  apiURI,\n  appId,\n  fileName,\n  refreshToken,\n  metadata = {},\n}: {\n  apiURI: string;\n  appId: string;\n  fileName: string;\n  refreshToken?: string;\n  metadata?: Record<string, any>;\n}) {\n  const { data } = await jsonFetch(`${apiURI}/storage/signed-upload-url`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n      authorization: `Bearer ${refreshToken}`,\n    },\n    body: JSON.stringify({\n      app_id: appId,\n      filename: fileName,\n    }),\n  });\n\n  return data;\n}\n\nexport async function upload(presignedUrl, file) {\n  const response = await fetch(presignedUrl, {\n    method: \"PUT\",\n    body: file,\n    headers: {\n      \"Content-Type\": file.type,\n    },\n  });\n\n  return response.ok;\n}\n\nexport async function getDownloadUrl({\n  apiURI,\n  appId,\n  path,\n  refreshToken,\n}: {\n  apiURI: string;\n  appId: string;\n  path: string;\n  refreshToken?: string;\n}) {\n  const { data } = await jsonFetch(\n    `${apiURI}/storage/signed-download-url?app_id=${appId}&filename=${encodeURIComponent(path)}`,\n    {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        authorization: `Bearer ${refreshToken}`,\n      },\n    },\n  );\n\n  return data;\n}\n\nexport async function deleteFile({\n  apiURI,\n  appId,\n  path,\n  refreshToken,\n}: {\n  apiURI: string;\n  appId: string;\n  path: string;\n  refreshToken?: string;\n}) {\n  const { data } = await jsonFetch(\n    `${apiURI}/storage/files?app_id=${appId}&filename=${encodeURIComponent(path)}`,\n    {\n      method: \"DELETE\",\n      headers: {\n        \"content-type\": \"application/json\",\n        authorization: `Bearer ${refreshToken}`,\n      },\n    },\n  );\n\n  return data;\n}\n"]}