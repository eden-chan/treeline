import type { RoomSchemaShape } from "./presence";
export declare class LinkAttrDef<Cardinality extends CardinalityKind, EntityName extends string> {
    entityName: EntityName;
    cardinality: Cardinality;
    constructor(entityName: EntityName, cardinality: Cardinality);
}
export declare class DataAttrDef<ValueType, IsRequired extends boolean> {
    valueType: ValueTypes;
    required: IsRequired;
    config: {
        indexed: boolean;
        unique: boolean;
    };
    constructor(valueType: ValueTypes, required: IsRequired, config?: {
        indexed: boolean;
        unique: boolean;
    });
    optional(): DataAttrDef<ValueType, false>;
    unique(): DataAttrDef<ValueType, IsRequired>;
    indexed(): DataAttrDef<ValueType, IsRequired>;
}
export declare class InstantGraph<Entities extends EntitiesDef, Links extends LinksDef<Entities>, RoomSchema extends RoomSchemaShape = {}> {
    entities: Entities;
    links: Links;
    constructor(entities: Entities, links: Links);
    withRoomSchema<_RoomSchema extends RoomSchemaShape>(): InstantGraph<Entities, Links, _RoomSchema>;
}
export type ValueTypes = "string" | "number" | "boolean" | "json";
export type CardinalityKind = "one" | "many";
export type AttrsDefs = Record<string, DataAttrDef<any, any>>;
export declare class EntityDef<Attrs extends AttrsDefs, Links extends Record<string, LinkAttrDef<any, any>>, AsType> {
    attrs: Attrs;
    links: Links;
    constructor(attrs: Attrs, links: Links);
    asType<_AsType extends Partial<{
        [AttrName in keyof Attrs]: Attrs[AttrName] extends DataAttrDef<infer ValueType, infer IsRequired> ? IsRequired extends true ? ValueType : ValueType | undefined : never;
    }>>(): EntityDef<Attrs, Links, _AsType>;
}
export type EntitiesDef = Record<string, EntityDef<any, any, any>>;
export type LinksDef<Entities extends EntitiesDef> = Record<string, LinkDef<Entities, keyof Entities, string, CardinalityKind, keyof Entities, string, CardinalityKind>>;
export type LinkDef<Entities extends EntitiesDef, FwdEntity extends keyof Entities, FwdAttr extends string, FwdCardinality extends CardinalityKind, RevEntity extends keyof Entities, RevAttr extends string, RevCardinality extends CardinalityKind> = {
    forward: {
        on: FwdEntity;
        label: FwdAttr;
        has: FwdCardinality;
    };
    reverse: {
        on: RevEntity;
        label: RevAttr;
        has: RevCardinality;
    };
};
export type EntitiesWithLinks<Entities extends EntitiesDef, Links extends LinksDef<Entities>> = {
    [EntityName in keyof Entities]: EntityDef<Entities[EntityName]["attrs"], EntityForwardLinksMap<EntityName, Entities, Links> & EntityReverseLinksMap<EntityName, Entities, Links>, Entities[EntityName] extends EntityDef<any, any, infer O> ? O extends void ? void : O : void>;
};
type EntityForwardLinksMap<EntityName extends keyof Entities, Entities extends EntitiesDef, Links extends LinksDef<Entities>, LinkIndexFwd = LinksIndexedByEntity<Entities, Links, "reverse">> = EntityName extends keyof LinkIndexFwd ? {
    [LinkName in keyof LinkIndexFwd[EntityName]]: LinkIndexFwd[EntityName][LinkName] extends LinkDef<Entities, infer RelatedEntityName, any, any, any, any, infer Cardinality> ? {
        entityName: RelatedEntityName;
        cardinality: Cardinality;
    } : never;
} : {};
type EntityReverseLinksMap<EntityName extends keyof Entities, Entities extends EntitiesDef, Links extends LinksDef<Entities>, RevLinkIndex = LinksIndexedByEntity<Entities, Links, "forward">> = EntityName extends keyof RevLinkIndex ? {
    [LinkName in keyof RevLinkIndex[EntityName]]: RevLinkIndex[EntityName][LinkName] extends LinkDef<Entities, any, any, infer Cardinality, infer RelatedEntityName, any, any> ? {
        entityName: RelatedEntityName;
        cardinality: Cardinality;
    } : never;
} : {};
type LinksIndexedByEntity<Entities extends EntitiesDef, Links extends LinksDef<Entities>, Direction extends "forward" | "reverse"> = {
    [FwdEntity in keyof Entities]: {
        [LinkName in keyof Links as Links[LinkName][Direction]["on"] extends FwdEntity ? Links[LinkName][Direction]["label"] : never]: Links[LinkName] extends LinkDef<Entities, infer FwdEntity, infer FwdAttr, infer FwdCardinality, infer RevEntity, infer RevAttr, infer RevCardinality> ? LinkDef<Entities, FwdEntity, FwdAttr, FwdCardinality, RevEntity, RevAttr, RevCardinality> : never;
    };
};
export type ResolveAttrs<Entities extends EntitiesDef, EntityName extends keyof Entities, ResolvedAttrs = {
    [AttrName in keyof Entities[EntityName]["attrs"]]: Entities[EntityName]["attrs"][AttrName] extends DataAttrDef<infer ValueType, infer IsRequired> ? IsRequired extends true ? ValueType : ValueType | undefined : never;
}> = Entities[EntityName] extends EntityDef<any, any, infer AsType> ? AsType extends void ? ResolvedAttrs : Omit<ResolvedAttrs, keyof AsType> & AsType : ResolvedAttrs;
export {};
//# sourceMappingURL=schemaTypes.d.ts.map