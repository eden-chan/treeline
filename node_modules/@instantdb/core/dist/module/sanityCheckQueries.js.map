{"version":3,"file":"sanityCheckQueries.js","sourceRoot":"","sources":["../../src/sanityCheckQueries.ts"],"names":[],"mappings":"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","sourcesContent":["// --------\n// Sanity check tests\n\nimport type {\n  Cursor,\n  Exactly,\n  InstantObject,\n  Query,\n  QueryResponse,\n} from \"./queryTypes\";\n\n/**\n * The purpose of these sanity checks:\n * If we make changes and something breaks, our build will fail.\n *\n * AFAIK we _could_ write this in our `tests` folder.\n * The latest version of `vitest` does support `assertType`, but:\n *  * it's easy to get false positives if configured incorrectly\n *  * the api is more vebose than this\n */\n\nexport function dummyQuery<Q extends Query>(\n  _query: Exactly<Query, Q>,\n): QueryResponse<Q, unknown> {\n  return 1 as any;\n}\n\nexport interface ExUser {\n  name: string;\n}\n\nexport interface ExPost {\n  title: string;\n}\n\ninterface ExSchema {\n  users: ExUser;\n  posts: ExPost;\n}\n\nexport function dummySchemaQuery<Q extends Query>(\n  _query: Exactly<Query, Q>,\n): QueryResponse<Q, ExSchema> {\n  return 1 as any;\n}\n\nconst sanityCheckQueries = () => {\n  // -----------\n  // Basic good inputs succeed\n  const r = dummyQuery({ users: {} });\n\n  // -----------\n  // Basic bad inputs fails\n  // @ts-expect-error\n  const r2 = dummyQuery({ users: 1 });\n  // @ts-expect-error\n  const r3 = dummyQuery({ users: \"\" });\n\n  // ----------------------\n  // Good $ clauses succeed\n  const r4 = dummyQuery({ users: { $: { where: { foo: 1 } } } });\n  const r5 = dummyQuery({ users: { $: { where: { foo: \"str\" } } } });\n  const r6 = dummyQuery({ users: { $: { where: { foo: true } } } });\n  const r7 = dummyQuery({ users: { $: { where: { \"foo.bar.baz\": 1 } } } });\n  const s1 = dummyQuery({\n    users: { $: { where: { foo: { in: [1, 2, 3] } } } },\n  });\n  const t1 = dummyQuery({\n    users: { $: { where: { or: [{ foo: 1 }] } } },\n  });\n  // You can have a field named or\n  const t2 = dummyQuery({\n    users: { $: { where: { or: \"fieldNamedOr\" } } },\n  });\n  const t3 = dummyQuery({\n    users: { $: { where: { and: [{ foo: 1 }] } } },\n  });\n  // You can have a field named and\n  const t4 = dummyQuery({\n    users: { $: { where: { and: \"fieldNamedAnd\" } } },\n  });\n  const t5 = dummyQuery({\n    users: { $: { where: { and: [{ or: [{ foo: 1 }] }] } } },\n  });\n  // Pagination\n  const t6 = dummyQuery({\n    users: { $: { limit: 10 } },\n  });\n  const t7 = dummyQuery({\n    users: { $: { limit: 10, offset: 10 } },\n  });\n  const t8 = dummyQuery({\n    users: { $: { where: { foo: 1 }, limit: 10, offset: 10 } },\n  });\n  const cursor: Cursor = [\n    \"61935703-bec6-4ade-ad9b-8bf382b92f69\",\n    \"995f5a9b-9ae1-4e59-97d1-df33afb44aee\",\n    \"61935703-bec6-4ade-ad9b-8bf382b92f69\",\n    10,\n  ];\n  const t9 = dummyQuery({\n    users: {\n      $: { where: { foo: 1 }, after: cursor },\n    },\n  });\n\n  const t10 = dummyQuery({\n    users: { $: { before: cursor } },\n  });\n\n  // ------------------\n  // Bad $ clauses fail\n  // @ts-expect-error\n  const r8 = dummyQuery({ users: { $: { where: \"foo\" } } });\n  // @ts-expect-error\n  const r9 = dummyQuery({ users: { $: { where: { foo: {} } } } });\n  // @ts-expect-error\n  const r10 = dummyQuery({ users: { $: { where2: 1 } } });\n  const s2 = dummyQuery({\n    // @ts-expect-error\n    users: { $: { where: { foo: { ini: [1, 2, 3] } } } },\n  });\n  const s3 = dummyQuery({\n    // @ts-expect-error\n    users: { $: { where: { foo: [] } } },\n  });\n\n  // ----------------\n  // Good Nested queries succeed\n  const r11 = dummyQuery({ users: { posts: {} } });\n  const r12 = dummyQuery({ users: {}, posts: {} });\n  const r13 = dummyQuery({\n    users: {\n      $: { where: { foo: 1 } },\n      posts: { $: { where: { foo: 1 } } },\n    },\n  });\n\n  // ----------\n  // Bad nested queries fail\n  // @ts-expect-error\n  const r14 = dummyQuery({ users: { foo: 1 } });\n};\nconst sanityCheckSchemalessResponses = () => {\n  // Simple Response\n  const r1: { users: InstantObject[] } = dummyQuery({ users: {} });\n  // Nested Response\n  const r2: { users: ({ posts: InstantObject[] } & InstantObject)[] } =\n    dummyQuery({ users: { posts: {} } });\n  // $ are ignored\n  const r3: { users: ({ posts: InstantObject[] } & InstantObject)[] } =\n    dummyQuery({\n      users: {\n        $: { where: { foo: 1 } },\n        posts: {},\n      },\n    });\n  // @ts-expect-error\n  r3.$;\n};\nfunction sanityCheckSchemadResponses() {\n  // simple response\n  const r1: { users: ExUser[] } = dummySchemaQuery({ users: {} });\n  // nested response\n  const r2: { users: ({ posts: ExPost[] } & ExUser)[] } = dummySchemaQuery({\n    users: { posts: {} },\n  });\n  // id included, but no other keys are allowed\n  const r3 = dummySchemaQuery({ users: {} });\n  const u = r3.users[0];\n  const id: string = u.id;\n  const name: string = u.name;\n  // @ts-expect-error\n  const title: string = u.title;\n}\n"]}