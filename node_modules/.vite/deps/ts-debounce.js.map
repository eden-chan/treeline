{
  "version": 3,
  "sources": ["../../ts-debounce/src/index.ts"],
  "sourcesContent": ["export type Options<Result> = {\n  isImmediate?: boolean;\n  maxWait?: number;\n  callback?: (data: Result) => void;\n};\n\nexport interface DebouncedFunction<\n  Args extends any[],\n  F extends (...args: Args) => any\n> {\n  (this: ThisParameterType<F>, ...args: Args): Promise<ReturnType<F>>;\n  cancel: (reason?: any) => void;\n}\n\ninterface DebouncedPromise<FunctionReturn> {\n  resolve: (result: FunctionReturn) => void;\n  reject: (reason?: any) => void;\n}\n\nexport function debounce<Args extends any[], F extends (...args: Args) => any>(\n  func: F,\n  waitMilliseconds = 50,\n  options: Options<ReturnType<F>> = {}\n): {\n  (this: ThisParameterType<F>, ...args: Parameters<F> & Args): Promise<\n    ReturnType<F>\n  >;\n  cancel: (reason?: any) => void;\n} {\n  let timeoutId: ReturnType<typeof setTimeout> | undefined;\n  const isImmediate = options.isImmediate ?? false;\n  const callback = options.callback ?? false;\n  const maxWait = options.maxWait;\n  let lastInvokeTime = Date.now();\n\n  let promises: DebouncedPromise<ReturnType<F>>[] = [];\n\n  function nextInvokeTimeout() {\n    if (maxWait !== undefined) {\n      const timeSinceLastInvocation = Date.now() - lastInvokeTime;\n\n      if (timeSinceLastInvocation + waitMilliseconds >= maxWait) {\n        return maxWait - timeSinceLastInvocation;\n      }\n    }\n\n    return waitMilliseconds;\n  }\n\n  const debouncedFunction = function (\n    this: ThisParameterType<F>,\n    ...args: Parameters<F>\n  ) {\n    const context = this;\n    return new Promise<ReturnType<F>>((resolve, reject) => {\n      const invokeFunction = function () {\n        timeoutId = undefined;\n        lastInvokeTime = Date.now();\n        if (!isImmediate) {\n          const result = func.apply(context, args);\n          callback && callback(result);\n          promises.forEach(({ resolve }) => resolve(result));\n          promises = [];\n        }\n      };\n\n      const shouldCallNow = isImmediate && timeoutId === undefined;\n\n      if (timeoutId !== undefined) {\n        clearTimeout(timeoutId);\n      }\n\n      timeoutId = setTimeout(invokeFunction, nextInvokeTimeout());\n\n      if (shouldCallNow) {\n        const result = func.apply(context, args);\n        callback && callback(result);\n        return resolve(result);\n      }\n      promises.push({ resolve, reject });\n    });\n  };\n\n  debouncedFunction.cancel = function (reason?: any) {\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId);\n    }\n    promises.forEach(({ reject }) => reject(reason));\n    promises = [];\n  };\n\n  return debouncedFunction;\n}\n"],
  "mappings": ";;;SAmBgBA,EACdC,IACAC,GACAC,GAAAA;AAAAA,MAAAA,GAAAA,GAOIC;AAAAA,aARJF,MAAAA,IAAmB,KAAA,WACnBC,MAAAA,IAAkC,CAAA;AAQlC,MAAME,IAAAA,SAAAA,IAAcF,EAAQE,gBAAAA,GACtBC,IAAAA,SAAAA,IAAWH,EAAQG,aAAAA,GACnBC,IAAUJ,EAAQI,SACpBC,IAAiBC,KAAKC,IAAAA,GAEtBC,IAA8C,CAAA;AAElD,WAASC,IAAAA;AACP,QAAA,WAAIL,GAAuB;AACzB,UAAMM,KAA0BJ,KAAKC,IAAAA,IAAQF;AAE7C,UAAIK,KAA0BX,KAAoBK,EAChD,QAAOA,IAAUM;IAAAA;AAIrB,WAAOX;EAAAA;AAGT,MAAMY,IAAoB,WAAA;AAAA,QAErBC,KAAAA,CAAAA,EAAAA,MAAAA,KAAAA,SAAAA,GAEGC,KAAUC;AAChB,WAAA,IAAWC,QAAuB,SAACC,IAASC,IAAAA;AAC1C,UAWMC,KAAgBhB,KAAAA,WAAeD;AAQrC,UAAA,WANIA,KACFkB,aAAalB,CAAAA,GAGfA,IAAYmB,WAjBW,WAAA;AAGrB,YAFAnB,IAAAA,QACAI,IAAiBC,KAAKC,IAAAA,GAAAA,CACjBL,GAAa;AAChB,cAAMmB,KAASvB,GAAKwB,MAAMT,IAASD,EAAAA;AACnCT,eAAYA,EAASkB,EAAAA,GACrBb,EAASe,QAAQ,SAAAC,IAAA;AAAA,oBAAiBR,GAAAA,GAAdA,SAAsBK,EAAAA;UAAAA,CAAAA,GAC1Cb,IAAW,CAAA;QAAA;MAAA,GAUwBC,EAAAA,CAAAA,GAEnCS,IAAe;AACjB,YAAMG,KAASvB,GAAKwB,MAAMT,IAASD,EAAAA;AAEnC,eADAT,KAAYA,EAASkB,EAAAA,GACdL,GAAQK,EAAAA;MAAAA;AAEjBb,QAASiB,KAAK,EAAET,SAAAA,IAASC,QAAAA,GAAAA,CAAAA;IAAAA,CAAAA;EAAAA;AAY7B,SARAN,EAAkBe,SAAS,SAAUC,IAAAA;AAAAA,eAC/B1B,KACFkB,aAAalB,CAAAA,GAEfO,EAASe,QAAQ,SAAAK,IAAA;AAAA,cAAgBX,GAAAA,GAAbA,QAAoBU,EAAAA;IAAAA,CAAAA,GACxCnB,IAAW,CAAA;EAAA,GAGNG;AAAAA;",
  "names": ["debounce", "func", "waitMilliseconds", "options", "timeoutId", "isImmediate", "callback", "maxWait", "lastInvokeTime", "Date", "now", "promises", "nextInvokeTimeout", "timeSinceLastInvocation", "debouncedFunction", "args", "context", "this", "Promise", "resolve", "reject", "shouldCallNow", "clearTimeout", "setTimeout", "result", "apply", "forEach", "r", "push", "cancel", "reason", "e"]
}
